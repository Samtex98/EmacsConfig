#+TITLE: Emacs Initialization file
* Emacs Settings
** Emacs UI
    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (display-time-mode 1)
      (scroll-bar-mode 0)
      (tool-bar-mode -1)
      (blink-cursor-mode 0)
      (show-paren-mode 1)
      (global-visual-line-mode t)
      (fringe-mode 1)
   #+end_src

** Emacs Misc
    #+begin_src emacs-lisp
      (setq tab-width 2)
      (mouse-wheel-mode -1)
      (setq show-paren-delay 0)

      (setq help-at-pt-display-when-idle t)
      (setq help-at-pt-timer-delay 0.1)
      (help-at-pt-set-timer)

      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

** Font
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "DejaVu Sans mono 12")
      (set-frame-font "DejaVu Sans mono 12" nil t)
    #+end_src
    
** Web Browser Setting
    #+begin_src emacs-lisp
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "qutebrowser")
    #+end_src

** Modeline
   #+begin_src emacs-lisp
     (defun modeline-alignment (left right)
       (let* ((available-width (-(window-width)(length left) 2)))
	 (format (format "%%s %%%ds " available-width) left right)))

     (setq-default mode-line-format
		   '((:eval (modeline-alignment
			     ;;left
			     (format-mode-line
			      (list
			       "   "
			       ;; Filestatus -:---
			       mode-line-mule-info
			       mode-line-modified
			       mode-line-client
			       mode-line-remote
			       mode-line-front-space
			       ;; Buffername
			       "%b"
			       ;; VC/Git
			       '(vc-mode vc-mode)))
			     ;;right
			     (format-mode-line
			      (list
			       ;; Date (Week Year-Month-Day)
			       '(:eval(propertize(format-time-string "w%V  %d/%m-%a")))
			       ;; Time (Hour:Minutes:Seconds)
			       '(:eval(propertize(format-time-string "  %H:%M")))))))))
   #+end_src

* Packages
** Straight
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+end_src

** Evil
   #+begin_src emacs-lisp
     (straight-use-package 'evil)
     (evil-mode)
   #+end_src

** Helm
   #+begin_src emacs-lisp
     (straight-use-package 'helm)
   #+end_src 

** Spacemacs Theme
   #+begin_src emacs-lisp
     (straight-use-package 'spacemacs-theme)
     (load-theme 'spacemacs-dark t)
   #+end_src
   
** Magit
   #+begin_src emacs-lisp
     (straight-use-package 'magit)
   #+end_src

** Org Bullets
   #+begin_src emacs-lisp
     (straight-use-package 'org-bullets)
     (defun org-bullet-mode()
       (org-bullets-mode 1))
     (add-hook 'org-mode-hook 'org-bullet-mode)
   #+end_src

** Company
   #+begin_src emacs-lisp
     (straight-use-package 'company)
     (add-hook 'prog-mode-hook 'global-company-mode)
   #+end_src

** Pdf Tools
   #+begin_src emacs-lisp
     (straight-use-package 'pdf-tools)
     (pdf-tools-install)
     (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
   #+end_src

** Rainbow mode
    #+begin_src emacs-lisp
      (straight-use-package 'rainbow-mode
      (add-hook 'prog-mode-hook 'rainbow-mode)
    #+end_src
