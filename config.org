#+TITLE: Emacs Initialization file
* To Do
  - Rework modeline
  - Implement hydra binds
  - Remove default bind ( and )
  - Page up/down inside exwm buffer
  - Spell checking or grammar checking
* Emacs Settings
** Keyboard Layout
   #+begin_src emacs-lisp
	 (shell-command
	  "setxkbmap -layout us -variant altgr-intl -option caps:escape")
   #+end_src

** Emacs UI
    #+begin_src emacs-lisp
	  (menu-bar-mode -1)
	  (display-time-mode 1)
	  (scroll-bar-mode 0)
	  (tool-bar-mode -1)
	  (blink-cursor-mode 0)
	  (show-paren-mode 1)
	  (global-visual-line-mode t)
	  (fringe-mode 1)
	  (display-battery-mode t)
   #+end_src

** Emacs Misc
    #+begin_src emacs-lisp
	  (setq-default tab-width 4)
	  (mouse-wheel-mode -1)
	  (setq show-paren-delay 0)

	  (setq help-at-pt-display-when-idle t)
	  (setq help-at-pt-timer-delay 0.1)
	  (help-at-pt-set-timer)

	  (setq backup-directory-alist `(("." . "~/.saves")))
	  (setq backup-by-copying t)
	  (setq delete-old-versions t
			kept-new-versions 4
			kept-old-versions 2
			version-control t)

	  (setq enable-recursive-minibuffers t)

	  (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

** Font
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "deja vu sans mono 12")
      (set-frame-font "deja vu sans mono 12" nil t)
    #+end_src
    
** Web Browser Setting
    #+begin_src emacs-lisp
	  (setq browse-url-browser-function 'browse-url-generic
			browse-url-generic-program "qutebrowser")
    #+end_src

** Modeline
   #+begin_src emacs-lisp
	 (defun modeline-alignment (left right)
	   (let* ((available-width (-(window-width)(length left) 2)))
		 (format (format "%%s %%%ds " available-width) left right)))

	 (setq-default mode-line-format
				   '((:eval (modeline-alignment
							 ;;left
							 (format-mode-line
							  (list
							   "   "
							   ;; Filestatus -:---
							   mode-line-mule-info
							   mode-line-modified
							   mode-line-client
							   mode-line-remote
							   mode-line-front-space
							   ;; Buffername
							   "%b"
							   ;; VC/Git
							   '(vc-mode vc-mode)))
							 ;;right
							 (format-mode-line
							  (list
							   "%p%%"
							   "  "
							   ;; Date (Week Year-Month-Day)
							   '(:eval(propertize(format-time-string "w%V  %d/%m-%a")))
							   ;; Time (Hour:Minutes:Seconds)
							   '(:eval(propertize(format-time-string "  %H:%M  ")))
							   ;; Battery Life
							   battery-mode-line-string
							   "]"
							   ))))))

   #+end_src

** Line Numbers
   #+begin_src emacs-lisp
	 (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+end_src

* Packages / Modes

** Straight
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+end_src

** Evil
   #+begin_src emacs-lisp
	 (straight-use-package 'evil)
	 (add-to-list 'load-path (concat user-emacs-directory "straight/build/undo-tree"))
	 (evil-mode)
	 (setq evil-emacs-state-modes nil)
	 (setq evil-insert-state-modes nil)
	 (setq evil-motion-state-modes nil)

	 (define-key evil-normal-state-map (kbd "C-u") (lambda ()
													 (interactive)
													 (evil-scroll-up nil)))
	 (define-key evil-normal-state-map (kbd "C-d") (lambda ()
													 (interactive)
													 (evil-scroll-down nil)))
	 (define-key evil-normal-state-map (kbd "Q") (lambda ()
												   (interactive)
												   (quit-window)))
   #+end_src

** Dired
   #+begin_src emacs-lisp
	 (add-hook 'dired-mode-hook
			   (lambda ()
				 (dired-hide-details-mode)))
   #+end_src

** W3M
   #+begin_src emacs-lisp
	 (straight-use-package 'w3m)

	 (require 'w3m)
	 (w3m-display-mode 'plain)
	 (setq w3m-use-title-buffer-name t)
	 (setq w3m-default-display-inline-images t)
	 (setq w3m-idle-images-show-interval 0)
   #+end_src

** Mu4e
   #+begin_src emacs-lisp
	 (require 'mu4e)

	 (setq mail-user-agent 'mu4e-user-agent
		   mu4e-maildir "~/Maildir/"
		   mu4e-sent-messages-behaviour 'delete
		   mu4e-get-mail-command "offlineimap"
		   message-kill-buffer-on-exit t
		   mu4e-view-prefer-html t
		   mu4e-headers-auto-update t
		   mu4e-compose-signature-auto-include nil)

	 (add-to-list 'mu4e-view-actions
				  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

	 (setq mu4e-view-show-images t)

	 (require 'smtpmail)
	 (setq mu4e-sent-folder "/Main/[Gmail].Sent Mail"
		   mu4e-drafts-folder "/Main/[Gmail].Drafts"
		   mu4e-trash-folder "/Main/[Gmail].Trash"
		   user-mail-address "hoche002@gmail.com"
		   smtpmail-default-smtp-server "smtp.gmail.com"
		   smtpmail-smtp-server "smtp.gmail.com"
		   smtpmail-smtp-service 587
		   message-send-mail-function 'smtpmail-send-it
		   smtpmail-stream-type 'starttls)

	 (defvar my-mu4e-account-alist
	   '(("Main"
		  (mu4e-sent-folder "/Main/[Gmail].Sent Mail")
		  (mu4e-drafts-folder "/Main/[Gmail].Drafts")
		  (mu4e-trash-folder "/Main/[Gmail].Trash")
		  (user-mail-address "hoche002@gmail.com")
		  (smtpmail-default-smtp-server "smtp.gmail.com")
		  (smtpmail-smtp-user "hoche002")
		  (smtpmail-smtp-server "smtp.gmail.com")
		  (smtpmail-stream-type starttls)
		  (smtpmail-smtp-service 587))
		 ("Work"
		  (mu4e-sent-folder "/Work/[Gmail].Sent Mail")
		  (mu4e-drafts-folder "/Work/[Gmail].Drafts")
		  (mu4e-trash-folder "/Work/[Gmail].Trash")
		  (user-mail-address "hochi.cheung.sam@gmail.com")
		  (smtpmail-default-smtp-server "smtp.gmail.com")
		  (smtpmail-smtp-user "hochi.cheung.sam")
		  (smtpmail-smtp-server "smtp.gmail.com")
		  (smtpmail-stream-type starttls)
		  (smtpmail-smtp-service 587))))

	 (defun my-mu4e-set-account ()
	   "Set the account for composing a message."
	   (let* ((account
			   (if mu4e-compose-parent-message
				   (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
					 (string-match "/\\(.*?\\)/" maildir)
					 (match-string 1 maildir))
				 (completing-read (format "Compose with account: (%s) "
										  (mapconcat #'(lambda (var) (car var))
													 my-mu4e-account-alist "/"))
								  (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
								  nil t nil nil (caar my-mu4e-account-alist))))
			  (account-vars (cdr (assoc account my-mu4e-account-alist))))
		 (if account-vars
			 (mapc #'(lambda (var)
					   (set (car var) (cadr var)))
				   account-vars)
		   (error "No email account found"))))

	 (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

	 (defun mu4e-view (msg)
	   (mu4e~view-define-mode)
	   (unless (mu4e~view-mark-as-read-maybe msg)
		 (my/mu4e-w3m-display msg)))

	 (defun my/mu4e-w3m-display (msg)
	   (when (get-buffer mu4e~view-buffer-name)
		 (progn
		   (switch-to-buffer mu4e~view-buffer-name)
		   (kill-buffer)))
	   (w3m-browse-url (concat "file://" (mu4e~write-body-to-html msg)))
	   (rename-buffer mu4e~view-buffer-name)
	   (select-window (get-buffer-window (get-buffer "*mu4e-headers*"))))
   #+end_src

*** Keybinds
	#+begin_src emacs-lisp
	  (require 'evil)
	  (evil-define-key 'normal 'evil-normal-state-map
		(kbd "C-x m") 'mu4e)
	  (evil-define-key 'normal mu4e-main-mode-map
		(kbd "j") 'mu4e~headers-jump-to-maildir
		(kbd "s") 'mu4e-headers-search
		(kbd "C") 'mu4e-compose-new)
	#+end_src

** Hydra
   #+begin_src emacs-lisp
	 (straight-use-package 'hydra)
   #+end_src

*** Hydra-zoom
	#+begin_src emacs-lisp
	  (defhydra hydra-zoom (global-map "<f2>")
		"zoom"
		("g" text-scale-increase "in")
		("l" text-scale-decrease "out"))
	#+end_src

*** Hydra-window
	#+begin_src emacs-lisp
	  (defhydra hydra-window ()
		"window-menu"
		("w" other-window "toggle")
		("c" delete-window "delete")
		("x" delete-other-windows "xor")
		("TAB" previous-buffer "prev")
		("s" split-window-below "split-below")
		("v" split-window-right "split-right")
		("0" balance-windows "balance")
		(")" balance-windows-area "area")
		("l" enlarge-window-horizontally "hor+")
		("h" shrink-window-horizontally "hor-")
		("k" enlarge-window "hor+")
		("j" shrink-window "hor+"))

	  (global-set-key (kbd "C-q") 'hydra-window/body)
	#+end_src

*** Hydra-buffer-menu
	#+begin_src emacs-lisp
	  (defhydra hydra-buffer-menu (:color pink
										  :hint nil)
		"
		^Mark^             ^Unmark^           ^Actions^          ^Search
		^^^^^^^^-----------------------------------------------------------------
		_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
		_s_: save          _U_: unmark up     _b_: bury          _I_: isearch
		_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
		_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
		_~_: modified
		"
		("m" Buffer-menu-mark)
		("u" Buffer-menu-unmark)
		("U" Buffer-menu-backup-unmark)
		("d" Buffer-menu-delete)
		("D" Buffer-menu-delete-backwards)
		("s" Buffer-menu-save)
		("~" Buffer-menu-not-modified)
		("x" Buffer-menu-execute)
		("b" Buffer-menu-bury)
		("g" revert-buffer)
		("T" Buffer-menu-toggle-files-only)
		("O" Buffer-menu-multi-occur :color blue)
		("I" Buffer-menu-isearch-buffers :color blue)
		("R" Buffer-menu-isearch-buffers-regexp :color blue)
		("c" nil "cancel")
		("v" Buffer-menu-select "select" :color blue)
		("o" Buffer-menu-other-window "other-window" :color blue)
		("q" quit-window "quit" :color blue))

	  (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
	#+end_src

** Ivy
   #+begin_src emacs-lisp
     (straight-use-package 'ivy)
     (ivy-mode)
   #+end_src

*** Counsel
    #+begin_src emacs-lisp
      (straight-use-package 'counsel)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    #+end_src

*** Swiper
    #+begin_src emacs-lisp
      (straight-use-package 'swiper)
      (global-set-key (kbd "\C-s") 'swiper)
    #+end_src

** Avy
   #+begin_src emacs-lisp
     (straight-use-package 'avy)
   #+end_src

** COMMENT Which Key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (which-key-mode)
     (setq which-key-show-prefix 'left)
   #+end_src

** Colorschemes

*** Gruvbox Theme
    #+begin_src emacs-lisp
      (straight-use-package 'gruvbox-theme)
    #+end_src

*** Spacemacs Theme
    #+begin_src emacs-lisp
      (straight-use-package 'spacemacs-theme)
    #+end_src
   
*** Ample Theme
	#+begin_src emacs-lisp
	  (straight-use-package 'ample-theme)
	#+end_src

*** Load Theme
    #+begin_src emacs-lisp
      (load-theme 'spacemacs-dark t)
    #+end_src

** Code Completion
*** Yasnippet
	#+begin_src emacs-lisp
	  (straight-use-package 'yasnippet)
	  (add-to-list 'load-path
				   "~/.emacs.d/plugins/yasnippet")
	  (require 'yasnippet)
	  (yas-global-mode 1)
	#+end_src

*** Company
	#+begin_src emacs-lisp
	  (straight-use-package 'company)
	  (add-hook 'after-init-hook 'global-company-mode)
	#+end_src
	
*** Company-lsp
   #+begin_src emacs-lisp
	   (straight-use-package 'company-lsp)
	   (require 'company-lsp)
	   (push 'company-lsp company-backends)
	   (setq company-lsp-cache-candidates t)
	   (setq company-lsp-async t)
	   (setq company-lsp-enable-snippet t)
   #+end_src

** ESS
   #+begin_src emacs-lisp
	 (straight-use-package 'ess)
	 (require 'ess-r-mode)
   #+end_src

** Org-babel
   #+begin_src emacs-lisp
	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((R . t)))
   #+end_src

** Magit
   #+begin_src emacs-lisp
	 (straight-use-package 'magit)
   #+end_src

*** Keybinds
	#+begin_src emacs-lisp
	  (require 'evil)
	  (evil-define-key 'normal 'evil-normal-state-map
		(kbd "C-x g") 'magit-status)
	  (evil-define-key 'normal magit-mode-map
		(kbd "j") 'magit-section-forward
		(kbd "k") 'magit-section-backward
		(kbd "p") 'magit-pull
		(kbd "s") 'magit-stage-file
		(kbd "u") 'magit-unstage-file
		(kbd "c") 'magit-commit
		(kbd "m") 'magit-merge
		(kbd "P") 'magit-push
		(kbd "f") 'magit-fetch
		(kbd "l") 'magit-log
		(kbd "i") 'magit-gitignore
		(kbd "r") 'magit-refresh
		(kbd "g") 'beginning-of-buffer
		(kbd "G") 'end-of-buffer
		(kbd "M") 'magit-remote
		(kbd "d") 'magit-diff
		(kbd "Q") 'magit-mode-bury-buffer)
	#+end_src
	
** Org Bullets
   #+begin_src emacs-lisp
     (straight-use-package 'org-bullets)
     (defun org-bullet-mode()
       (org-bullets-mode 1))
     (add-hook 'org-mode-hook 'org-bullet-mode)
   #+end_src
   
** Aggressive Indent
   #+begin_src emacs-lisp
     (straight-use-package 'aggressive-indent)
     (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
   #+end_src

** Pdf Tools
   #+begin_src emacs-lisp
     (straight-use-package 'pdf-tools)
     (pdf-tools-install)
     (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
   #+end_src

*** Keybinds
	#+begin_src emacs-lisp
	  (require 'evil)
	  (evil-define-key 'normal pdf-view-mode-map
		(kbd "j") 'pdf-view-scroll-up-or-next-page
		(kbd "k") 'pdf-view-scroll-down-or-previous-page
		(kbd "C-j") 'pdf-view-next-line-or-next-page
		(kbd "C-k") 'pdf-view-previous-line-or-previous-page
		(kbd "J") 'pdf-view-next-page-command
		(kbd "K") 'pdf-view-previous-page-command
		(kbd "h") 'image-backward-hscroll
		(kbd "l") 'image-forward-hscroll
		(kbd "f") 'pdf-view-goto-page
		(kbd "r") 'pdf-view-revert-buffer
		(kbd "=") 'pdf-view-enlarge
		(kbd "+") 'pdf-view-enlarge
		(kbd "-") 'pdf-view-shrink
		(kbd "0") 'pdf-view-scale-reset
		(kbd "H") 'pdf-view-fit-height-to-window
		(kbd "W") 'pdf-view-fit-width-to-window
		(kbd "P") 'pdf-view-fit-page-to-window
		(kbd "/") 'isearch-forward-word
		(kbd "n") 'isearch-repeat-forward
		(kbd "N") 'isearch-repeat-backward
		(kbd "G") 'pdf-view-first-page
		(kbd "o") 'pdf-outline)
	#+end_src

** Rainbow Delimiters
   #+begin_src emacs-lisp
     (straight-use-package 'rainbow-delimiters)
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+end_src

** Ox Twbs
   #+begin_src emacs-lisp
     (straight-use-package 'ox-twbs)
   #+end_src

** Smart Parens
   #+begin_src emacs-lisp
	 (straight-use-package 'smartparens)
	 (add-hook 'org-mode-hook #'smartparens-mode)
	 (add-hook 'prog-mode-hook #'smartparens-mode)
	 ;(sp-local-pair 'c-mode "'" nil :actions :rem)
	 ;(sp-local-pair 'c-mode "'" "'")
	 (setq-default sp-escape-quotes-after-insert nil)
   #+end_src
   
** Flycheck
   #+begin_src emacs-lisp
	 (straight-use-package 'flycheck)
	 (global-flycheck-mode)
	 (with-eval-after-load 'flycheck
	   (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
   #+end_src

** Lsp-mode
   #+begin_src emacs-lisp
	 (straight-use-package 'lsp-mode)
	 (require 'lsp-mode)
	 (add-hook 'c++-mode-hook #'lsp)
	 (add-hook 'c-mode-hook #'lsp)
	 (add-hook 'java-mode-hook #'lsp)
	 (add-hook 'lsp-mode-hook #'lsp)
	 (add-hook 'haskell-mode-hook #'lsp)
   #+end_src

*** Ccls
   #+begin_src emacs-lisp
	 (with-eval-after-load 'lsp
	   (straight-use-package 'ccls)
	   (require 'ccls)
	   (setq ccls-executable "/usr/bin/ccls")
	   (add-hook 'c-mode-hook #'lsp)
	   (add-hook 'objc-mode-hook #'lsp)
	   (add-hook 'c++-mode-hook #'lsp))
   #+end_src

*** Lsp-java
   #+begin_src emacs-lisp
	 (with-eval-after-load 'lsp
	   (straight-use-package 'lsp-java)
	   (require 'lsp-java))
   #+end_src

*** Lsp-haskell
	#+begin_src emacs-lisp
	  (with-eval-after-load 'lsp
		(straight-use-package 'lsp-haskell)
		(require 'lsp-haskell))
	#+end_src

*** Lsp-tex
	#+begin_src emacs-lisp
	  (require 'lsp-mode)
	  (lsp-register-client
	   (make-lsp-client :new-connection (lsp-stdio-connection "digestif")
						:major-modes '(latex-mode plain-tex-mode)
						:server-id 'digestif))
	  (add-to-list 'lsp-language-id-configuration '(latex-mode . "latex"))
	  (add-to-list 'lsp-language-id-configuration '(plain-tex-mode . "plaintex"))

	  (require 'company-lsp)
	  (add-to-list 'company-lsp-filter-candidates '(digestif . nil))
	#+end_src

** Octave-mode
   #+begin_src emacs-lisp
	 (setq auto-mode-alist
		   (cons '("\\.m$" . octave-mode) auto-mode-alist))

	 (add-hook 'octave-mode-hook
			   (lambda()
				 (abbrev-mode 1)
				 (if (eq window-system 'x)
					 (font-lock-mode 1))))
   #+end_src
   
** COMMENT AUCTex
   #+begin_src emacs-lisp
	 (straight-use-package 'auctex)
	 (setq TeX-auto-save t)
	 (setq TeX-parse-self t)
	 (setq Tex-save-query nil)
	 (setq TeX-PDF-mode t)
	 (setq-default TeX-master nil)
	 (require 'reftex)
	 (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
	 (add-hook 'latex-mode-hook 'turn-on-reftex)
   #+end_src

** Exwm
   #+begin_src emacs-lisp
	 (straight-use-package 'exwm)
	 (server-start)
	 (require 'exwm)

	 (setq exwm-workspace-number 4)
	 (setq ediff-window-setup-function 'ediff-setup-window-plain)

	 (add-hook 'exwm-update-class-hook
			   (lambda ()
				 (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
							 (string= "gimp" exwm-instance-name))
				   (exwm-workspace-rename-buffer exwm-class-name))))
	 (add-hook 'exwm-update-title-hook
			   (lambda ()
				 (when (or (not exwm-instance-name)
						   (string-prefix-p "sun-awt-X11-" exwm-instance-name)
						   (string= "gimp" exwm-instance-name))
				   (exwm-workspace-rename-buffer exwm-title))))

	 (setq exwm-input-global-keys
		   `(
			 ;; [s-r] Exit char-mode and fullscreen mode
			 ([?\s-r] . exwm-reset)
			 ;; [s-w] Switch workspace interactively
			 ([?\s-w] . exwm-workspace-switch)
			 ;; [s-%d] Switch to a workspace by its index
			 ,@(mapcar (lambda (i)
						 `(,(kbd (format "s-%d" i)) .
						   (lambda ()
							 (interactive)
							 (exwm-workspace-switch-create ,i))))
					   (number-sequence 0 9))
			 ;; [s-&][M-&] Launch applications 
			 ([?\s-&] . (lambda (command)
						  (interactive (list (read-shell-command "$ ")))
						  (start-process-shell-command command nil command)))
			 ;; Bind "s-<f2>" to "slock", a simple X display locker.
			 ([s-f2] . (lambda ()
						 (interactive)
						 (start-process "" nil "/usr/bin/slock")))))

	 (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

	 (setq exwm-input-simulation-keys
		   '(
			 ;; movement
			 ([?\C-b] . [left])
			 ([?\M-b] . [C-left])
			 ([?\C-f] . [right])
			 ([?\M-f] . [C-right])
			 ([?\C-p] . [up])
			 ([?\C-n] . [down])
			 ([?\C-a] . [home])
			 ([?\C-e] . [end])
			 ([?\M-v] . [prior])
			 ([?\C-v] . [next])
			 ([?\C-d] . [delete])
			 ([?\C-k] . [S-end delete])
			 ;; cut/paste.
			 ([?\C-w] . [?\C-x])
			 ([?\M-w] . [?\C-c])
			 ([?\C-y] . [?\C-v])
			 ;; search
			 ([?\C-s] . [?\C-f])))

	 (exwm-enable)
   #+end_src

   
