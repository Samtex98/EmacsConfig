#+TITLE: Emacs Initialization file
* To Do
  - Rework modeline
  - Implement hydra binds
* Emacs Settings
** Emacs UI
    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (display-time-mode 1)
      (scroll-bar-mode 0)
      (tool-bar-mode -1)
      (blink-cursor-mode 0)
      (show-paren-mode 1)
      (global-visual-line-mode t)
      (fringe-mode 1)
   #+end_src

** Emacs Misc
    #+begin_src emacs-lisp
	  (setq-default tab-width 4)
	  (mouse-wheel-mode -1)
	  (setq show-paren-delay 0)

	  (setq help-at-pt-display-when-idle t)
	  (setq help-at-pt-timer-delay 0.1)
	  (help-at-pt-set-timer)

	  (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

** Font
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "DejaVu Sans mono 13")
      (set-frame-font "DejaVu Sans mono 13" nil t)
    #+end_src
    
** Web Browser Setting
    #+begin_src emacs-lisp
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "qutebrowser")
    #+end_src

** COMMENT Modeline

   #+begin_src emacs-lisp
	 (defun modeline-alignment (left right)
	   (let* ((available-width (-(window-width)(length left) 2)))
		 (format (format "%%s %%%ds " available-width) left right)))

	 (setq-default mode-line-format-left
				   (list
					"   "
					mode-line-mule-info
					mode-line-modified
					mode-line-client
					mode-line-remote
					mode-line-front-space
					"%b"
					'(vc-mode vc-mode)))

	 (setq-default mode-line-format-right
				   (list
					"%p%%"
					"  "
					'(:eval(propertize(format-time-string "w%V  %d/%m-%a")))
					'(:eval(propertize(format-time-string "  %H:%M")))))

	 (modeline-alignment(format-mode-line(mode-line-format-left))
						(format-mode-line(mode-line-format-right)))
   #+end_src

** COMMENT Battery
   #+begin_src emacs-lisp
	 (define-minor-mode my/display-battery-mode
	   "Toggle battery status display in mode line (Display Battery mode).
	 The text displayed in the mode line is controlled by
	 `battery-mode-line-format' and `battery-status-function'.
	 The mode line is be updated every `battery-update-interval'
	 seconds."
	   :global t :group 'battery
	   (setq battery-mode-line-string "")
	   (or global-mode-string (setq global-mode-string '("")))
	   (and battery-update-timer (cancel-timer battery-update-timer))
	   (if (and battery-status-function battery-mode-line-format)
		   (if (not display-battery-mode)
			   (setq global-mode-string
					 (delq 'battery-mode-line-string global-mode-string))
			 (add-to-list 'global-mode-string 'battery-mode-line-string t)
			 (setq battery-update-timer (run-at-time nil battery-update-interval
													 'battery-update-handler))
			 (battery-update))
		 (message "Battery status not available")
		 (setq display-battery-mode nil)))
   #+end_src

** Line Numbers
   #+begin_src emacs-lisp
	 (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+end_src

* Packages
** Straight
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+end_src

** Evil
   #+begin_src emacs-lisp
     (straight-use-package 'evil)
     (add-to-list 'load-path (concat user-emacs-directory "straight/build/undo-tree"))
     (evil-mode)
   #+end_src

** Hydra
   #+begin_src emacs-lisp
	 (straight-use-package 'hydra)
   #+end_src

*** Hydra-zoom
	#+begin_src emacs-lisp
	  (defhydra hydra-zoom (global-map "<f2>")
		"zoom"
		("g" text-scale-increase "in")
		("l" text-scale-decrease "out"))
	#+end_src

*** hydra-buffer-menu
	#+begin_src emacs-lisp
	  (defhydra hydra-buffer-menu (:color pink
										  :hint nil)
		"
	  ^Mark^             ^Unmark^           ^Actions^          ^Search
	  ^^^^^^^^-----------------------------------------------------------------
	  _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
	  _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
	  _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
	  _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
	  _~_: modified
	  "
		("m" Buffer-menu-mark)
		("u" Buffer-menu-unmark)
		("U" Buffer-menu-backup-unmark)
		("d" Buffer-menu-delete)
		("D" Buffer-menu-delete-backwards)
		("s" Buffer-menu-save)
		("~" Buffer-menu-not-modified)
		("x" Buffer-menu-execute)
		("b" Buffer-menu-bury)
		("g" revert-buffer)
		("T" Buffer-menu-toggle-files-only)
		("O" Buffer-menu-multi-occur :color blue)
		("I" Buffer-menu-isearch-buffers :color blue)
		("R" Buffer-menu-isearch-buffers-regexp :color blue)
		("c" nil "cancel")
		("v" Buffer-menu-select "select" :color blue)
		("o" Buffer-menu-other-window "other-window" :color blue)
		("q" quit-window "quit" :color blue))

	  (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
	#+end_src

** Ivy
   #+begin_src emacs-lisp
     (straight-use-package 'ivy)
     (ivy-mode)
   #+end_src

*** Counsel
    #+begin_src emacs-lisp
      (straight-use-package 'counsel)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    #+end_src

*** Swiper
    #+begin_src emacs-lisp
      (straight-use-package 'swiper)
      (global-set-key (kbd "\C-s") 'swiper)
    #+end_src

** Avy
   #+begin_src emacs-lisp
     (straight-use-package 'avy)
   #+end_src

** COMMENT Which Key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (which-key-mode)
     (setq which-key-show-prefix 'left)
   #+end_src

** Colorschemes

*** Gruvbox Theme
    #+begin_src emacs-lisp
      (straight-use-package 'gruvbox-theme)
    #+end_src

*** Spacemacs Theme
    #+begin_src emacs-lisp
      (straight-use-package 'spacemacs-theme)
    #+end_src
   
*** Load Theme
    #+begin_src emacs-lisp
      (load-theme 'spacemacs-dark t)
    #+end_src

** Code Completion
*** Yasnippet
	#+begin_src emacs-lisp
	  (straight-use-package 'yasnippet)
	  (add-to-list 'load-path
				   "~/.emacs.d/plugins/yasnippet")
	  (require 'yasnippet)
	  (yas-global-mode 1)
	#+end_src

*** Company
	#+begin_src emacs-lisp
	  (straight-use-package 'company)
	  (add-hook 'after-init-hook 'global-company-mode)
	#+end_src
	
*** Company-lsp
   #+begin_src emacs-lisp
	   (straight-use-package 'company-lsp)
	   (require 'company-lsp)
	   (push 'company-lsp company-backends)
	   (setq company-lsp-cache-candidates t)
	   (setq company-lsp-async t)
	   (setq company-lsp-enable-snippet t)
   #+end_src

** ESS
   #+begin_src emacs-lisp
	 (straight-use-package 'ess)
	 (require 'ess-r-mode)
   #+end_src

** Magit
   #+begin_src emacs-lisp
     (straight-use-package 'magit)
   #+end_src

** Org Bullets
   #+begin_src emacs-lisp
     (straight-use-package 'org-bullets)
     (defun org-bullet-mode()
       (org-bullets-mode 1))
     (add-hook 'org-mode-hook 'org-bullet-mode)
   #+end_src

** Aggressive Indent
   #+begin_src emacs-lisp
     (straight-use-package 'aggressive-indent)
     (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
   #+end_src

** Pdf Tools
   #+begin_src emacs-lisp
     (straight-use-package 'pdf-tools)
     (pdf-tools-install)
     (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
   #+end_src

** Rainbow Delimiters
   #+begin_src emacs-lisp
     (straight-use-package 'rainbow-delimiters)
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+end_src

** Ox Twbs
   #+begin_src emacs-lisp
     (straight-use-package 'ox-twbs)
   #+end_src

** Smart Parens
   #+begin_src emacs-lisp
	 (straight-use-package 'smartparens)
	 (add-hook 'org-mode-hook #'smartparens-mode)
	 (add-hook 'prog-mode-hook #'smartparens-mode)
   #+end_src
   
** COMMENT Evil Collection
   #+begin_src emacs-lisp
     (straight-use-package 'evil-collection)
     (setq evil-collection-setup-minibuffer t)
     (evil-collection-init)
   #+end_src

** Flycheck
   #+begin_src emacs-lisp
	 (straight-use-package 'flycheck)
	 (global-flycheck-mode)
	 (with-eval-after-load 'flycheck
	   (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
   #+end_src

** Lsp-mode
   #+begin_src emacs-lisp
	 (straight-use-package 'lsp-mode)
	 (require 'lsp-mode)
	 (add-hook 'c++-mode-hook #'lsp)
	 (add-hook 'c-mode-hook #'lsp)
	 (add-hook 'java-mode-hook #'lsp)
   #+end_src

*** Ccls
   #+begin_src emacs-lisp
	 (with-eval-after-load 'lsp
	   (straight-use-package 'ccls)
	   (require 'ccls)
	   (setq ccls-executable "/usr/bin/ccls")
	   (add-hook 'c-mode-hook #'lsp)
	   (add-hook 'objc-mode-hook #'lsp)
	   (add-hook 'c++-mode-hook #'lsp))
   #+end_src

*** Lsp-java
   #+begin_src emacs-lisp
	 (with-eval-after-load 'lsp
	   (straight-use-package 'lsp-java)
	   (require 'lsp-java))
   #+end_src

** Exwm
   #+begin_src emacs-lisp
	 (straight-use-package 'exwm)
	 (server-start)
	 (require 'exwm)

	 (setq exwm-workspace-number 4)

	 (add-hook 'exwm-update-class-hook
			   (lambda ()
				 (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
							 (string= "gimp" exwm-instance-name))
				   (exwm-workspace-rename-buffer exwm-class-name))))
	 (add-hook 'exwm-update-title-hook
			   (lambda ()
				 (when (or (not exwm-instance-name)
						   (string-prefix-p "sun-awt-X11-" exwm-instance-name)
						   (string= "gimp" exwm-instance-name))
				   (exwm-workspace-rename-buffer exwm-title))))

	 (setq exwm-input-global-keys
		   `(
			 ;; [s-r] Exit char-mode and fullscreen mode
			 ([?\s-r] . exwm-reset)
			 ;; [s-w] Switch workspace interactively
			 ([?\s-w] . exwm-workspace-switch)
			 ;; [s-%d] Switch to a workspace by its index
			 ,@(mapcar (lambda (i)
						 `(,(kbd (format "s-%d" i)) .
						   (lambda ()
							 (interactive)
							 (exwm-workspace-switch-create ,i))))
					   (number-sequence 0 9))
			 ;; [s-&][M-&] Launch applications 
			 ([?\s-&] . (lambda (command)
						  (interactive (list (read-shell-command "$ ")))
						  (start-process-shell-command command nil command)))
			 ;; Bind "s-<f2>" to "slock", a simple X display locker.
			 ([s-f2] . (lambda ()
						 (interactive)
						 (start-process "" nil "/usr/bin/slock")))))

	 (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

	 (setq exwm-input-simulation-keys
		   '(
			 ;; movement
			 ([?\C-b] . [left])
			 ([?\M-b] . [C-left])
			 ([?\C-f] . [right])
			 ([?\M-f] . [C-right])
			 ([?\C-p] . [up])
			 ([?\C-n] . [down])
			 ([?\C-a] . [home])
			 ([?\C-e] . [end])
			 ([?\M-v] . [prior])
			 ([?\C-v] . [next])
			 ([?\C-d] . [delete])
			 ([?\C-k] . [S-end delete])
			 ;; cut/paste.
			 ([?\C-w] . [?\C-x])
			 ([?\M-w] . [?\C-c])
			 ([?\C-y] . [?\C-v])
			 ;; search
			 ([?\C-s] . [?\C-f])))

	 (exwm-enable)
   #+end_src

   
