* COMMENT To Do
  - Rework modeline
  - Keepassxc-cli frontend
  - Rclone frontend
  - Oxtwbs keybinds
  - Smart parens binds
  - Image mode keybinds
  - Magit diff/ediff keybinds
* Emacs Settings
** Keyboard Layout
   #+begin_src emacs-lisp
	 (shell-command
	  "setxkbmap -layout us -variant altgr-intl -option caps:escape")
   #+end_src

** Emacs UI
    #+begin_src emacs-lisp
	  (menu-bar-mode -1)
	  (display-time-mode 1)
	  (scroll-bar-mode 0)
	  (tool-bar-mode -1)
	  (blink-cursor-mode 0)
	  (show-paren-mode 1)
	  (global-visual-line-mode t)
	  (fringe-mode 1)
	  (display-battery-mode t)
   #+end_src

** Emacs Misc
    #+begin_src emacs-lisp
	  (setq-default tab-width 2)
	  (mouse-wheel-mode -1)
	  (setq show-paren-delay 0)

	  (setq help-at-pt-display-when-idle t)
	  (setq help-at-pt-timer-delay 0.1)
	  (help-at-pt-set-timer)

	  (setq backup-directory-alist `(("." . "~/.saves")))
	  (setq backup-by-copying t)
	  (setq delete-old-versions t
			kept-new-versions 4
			kept-old-versions 2
			version-control t)

	  (setq enable-recursive-minibuffers t)

	  (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

** Font
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "deja vu sans mono 12")
      (set-frame-font "deja vu sans mono 12" nil t)
    #+end_src
    
** Web Browser Setting
    #+begin_src emacs-lisp
	  (setq browse-url-browser-function 'browse-url-generic
			browse-url-generic-program "qutebrowser")
    #+end_src

** Modeline
   #+begin_src emacs-lisp
	 (defun modeline-alignment (left right)
	   (let* ((available-width (-(window-width)(length left) 2)))
		 (format (format "%%s %%%ds " available-width) left right)))

	 (setq battery-mode-line-format "[%p%%]")
	 (setq-default mode-line-format
				   '((:eval (modeline-alignment
							 ;;left
							 (format-mode-line
							  (list
							   "   "
							   ;; Filestatus -:---
							   mode-line-mule-info
							   mode-line-modified
							   mode-line-client
							   mode-line-remote
							   mode-line-front-space
							   ;; Buffername
							   "%b"
							   ;; VC/Git
							   '(vc-mode vc-mode)))
							 ;;right
							 (format-mode-line
							  (list
							   "%p%%"
							   "  "
							   ;; Date (Week Year-Month-Day)
							   '(:eval(propertize(format-time-string "w%V %a %d/%h")))
							   ;; Time (Hour:Minutes:Seconds)
							   '(:eval(propertize(format-time-string "  %H:%M  ")))
							   ;; Battery Life
							   ;;(my/battery-modeline)
							   battery-mode-line-string
							   ))))))

   #+end_src

** Line Numbers
   #+begin_src emacs-lisp
	 (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+end_src

** Org Setting
   #+begin_src emacs-lisp
	 (setq org-src-window-setup 'current-window)
   #+end_src

* Packages / Functions

** Straight
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+end_src

** Evil
   #+begin_src emacs-lisp
	 (straight-use-package 'evil)
	 (add-to-list 'load-path (concat user-emacs-directory "straight/build/undo-tree"))
	 (evil-mode)
	 (setq evil-emacs-state-modes nil)
	 (setq evil-insert-state-modes nil)
	 (setq evil-motion-state-modes nil)

	 (define-key evil-normal-state-map (kbd "C-u") (lambda ()
													 (interactive)
													 (evil-scroll-up nil)))
	 (define-key evil-normal-state-map (kbd "C-d") (lambda ()
													 (interactive)
													 (evil-scroll-down nil)))
	 (define-key evil-normal-state-map (kbd "Q") (lambda ()
												   (interactive)
												   (quit-window)))
   #+end_src

** Dired
   #+begin_src emacs-lisp
	 (add-hook 'dired-mode-hook
			   (lambda ()
				 (dired-hide-details-mode)))
   #+end_src

** Undo-Tree
	 #+begin_src emacs-lisp
		 (global-undo-tree-mode)
	 #+end_src

** W3M
   #+begin_src emacs-lisp
		 (straight-use-package 'w3m)

		 (require 'w3m)
		 (w3m-display-mode 'plain)
		 (setq w3m-use-title-buffer-name t)
		 (setq w3m-default-display-inline-images t)
		 (setq w3m-idle-images-show-interval 0)
   #+end_src

** Mu4e
   #+begin_src emacs-lisp
	 (require 'mu4e)

	 (setq mail-user-agent 'mu4e-user-agent
		   mu4e-maildir "~/Maildir/"
		   mu4e-sent-messages-behaviour 'delete
		   mu4e-get-mail-command "offlineimap"
		   message-kill-buffer-on-exit t
		   mu4e-view-prefer-html t
		   mu4e-headers-auto-update t
		   mu4e-compose-signature-auto-include nil)

	 (add-to-list 'mu4e-view-actions
				  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

	 (setq mu4e-view-show-images t)

	 (require 'smtpmail)
	 (setq mu4e-sent-folder "/Main/[Gmail].Sent Mail"
		   mu4e-drafts-folder "/Main/[Gmail].Drafts"
		   mu4e-trash-folder "/Main/[Gmail].Trash"
		   user-mail-address "hoche002@gmail.com"
		   smtpmail-default-smtp-server "smtp.gmail.com"
		   smtpmail-smtp-server "smtp.gmail.com"
		   smtpmail-smtp-service 587
		   message-send-mail-function 'smtpmail-send-it
		   smtpmail-stream-type 'starttls)

	 (defvar my-mu4e-account-alist
	   '(("Main"
		  (mu4e-sent-folder "/Main/[Gmail].Sent Mail")
		  (mu4e-drafts-folder "/Main/[Gmail].Drafts")
		  (mu4e-trash-folder "/Main/[Gmail].Trash")
		  (user-mail-address "hoche002@gmail.com")
		  (smtpmail-default-smtp-server "smtp.gmail.com")
		  (smtpmail-smtp-user "hoche002")
		  (smtpmail-smtp-server "smtp.gmail.com")
		  (smtpmail-stream-type starttls)
		  (smtpmail-smtp-service 587))
		 ("Work"
		  (mu4e-sent-folder "/Work/[Gmail].Sent Mail")
		  (mu4e-drafts-folder "/Work/[Gmail].Drafts")
		  (mu4e-trash-folder "/Work/[Gmail].Trash")
		  (user-mail-address "hochi.cheung.sam@gmail.com")
		  (smtpmail-default-smtp-server "smtp.gmail.com")
		  (smtpmail-smtp-user "hochi.cheung.sam")
		  (smtpmail-smtp-server "smtp.gmail.com")
		  (smtpmail-stream-type starttls)
		  (smtpmail-smtp-service 587))))

	 (defun my-mu4e-set-account ()
	   "Set the account for composing a message."
	   (let* ((account
			   (if mu4e-compose-parent-message
				   (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
					 (string-match "/\\(.*?\\)/" maildir)
					 (match-string 1 maildir))
				 (completing-read (format "Compose with account: (%s) "
										  (mapconcat #'(lambda (var) (car var))
													 my-mu4e-account-alist "/"))
								  (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
								  nil t nil nil (caar my-mu4e-account-alist))))
			  (account-vars (cdr (assoc account my-mu4e-account-alist))))
		 (if account-vars
			 (mapc #'(lambda (var)
					   (set (car var) (cadr var)))
				   account-vars)
		   (error "No email account found"))))

	 (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

	 (defun mu4e-view (msg)
	   (mu4e~view-define-mode)
	   (unless (mu4e~view-mark-as-read-maybe msg)
		 (my/mu4e-w3m-display msg)))

	 (defun my/mu4e-w3m-display (msg)
	   (when (get-buffer mu4e~view-buffer-name)
		 (progn
		   (switch-to-buffer mu4e~view-buffer-name)
		   (kill-buffer)))
	   (w3m-browse-url (concat "file://" (mu4e~write-body-to-html msg)))
	   (rename-buffer mu4e~view-buffer-name)
	   (select-window (get-buffer-window (get-buffer "*mu4e-headers*"))))
   #+end_src

*** Keybinds
	#+begin_src emacs-lisp
	  (require 'evil)
	  (evil-define-key 'normal 'evil-normal-state-map
		(kbd "C-x m") 'mu4e)
	  (evil-define-key 'normal mu4e-main-mode-map
		(kbd "j") 'mu4e~headers-jump-to-maildir
		(kbd "s") 'mu4e-headers-search
		(kbd "C") 'mu4e-compose-new)
	#+end_src

** Hydra
   #+begin_src emacs-lisp
	 (straight-use-package 'hydra)
   #+end_src
	 
*** Hydra-menu
		#+begin_src emacs-lisp
			(defhydra hydra-menu ()
				"Hydra Menu"
				("w" hydra-window/body "hydra-window" :exit t)
				("e" hydra-pulseaudio/body "hydra-pulseaudio" :exit t)
				("s-SPC" nil "quit"))

			(global-set-key (kbd "s-SPC") 'hydra-menu/body)
		#+end_src
		
*** Hydra-window
	#+begin_src emacs-lisp
	  (defhydra hydra-window ()
		"window-menu"
		("w" other-window "toggle")
		("c" delete-window "delete")
		("x" delete-other-windows "xor")
		("TAB" previous-buffer "prev")
		("s" split-window-below "split-below")
		("v" split-window-right "split-right")
		("0" balance-windows "balance")
		(")" balance-windows-area "area")
		("l" enlarge-window-horizontally "hor+")
		("h" shrink-window-horizontally "hor-")
		("k" enlarge-window "hor+")
		("j" shrink-window "hor-")
		("b" hydra-menu/body "back" :exit t)
		("s-SPC" nil "quit"))
	#+end_src

*** Hydra-pulseaudio
	#+begin_src emacs-lisp
		(defhydra hydra-pulseaudio ()
		"pulseaudio-menu"
		("-" pulseaudio-control-decrease-volume "dec -10")
		("=" pulseaudio-control-increase-volume "inc +10")
		("_" pulseaudio-control-select-sink-by-name "select sink")
		("+" pulseaudio-control-toggle-current-sink-mute "mute sink")
		("b" hydra-menu/body "back" :exit t)
		("s-SPC" nil "quit" :exit t))
	#+end_src

	#+RESULTS:

** Ivy
   #+begin_src emacs-lisp
     (straight-use-package 'ivy)
     (ivy-mode)
   #+end_src

*** Counsel
    #+begin_src emacs-lisp
      (straight-use-package 'counsel)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    #+end_src

*** Swiper
    #+begin_src emacs-lisp
      (straight-use-package 'swiper)
      (global-set-key (kbd "\C-s") 'swiper)
    #+end_src

** Avy
   #+begin_src emacs-lisp
     (straight-use-package 'avy)
   #+end_src

** Which Key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (which-key-mode)
     (setq which-key-show-prefix 'left)
   #+end_src

** Colorschemes

*** Spacemacs Theme
    #+begin_src emacs-lisp
      (straight-use-package 'spacemacs-theme)
    #+end_src
   
*** Load Scheme
    #+begin_src emacs-lisp
      (load-theme 'spacemacs-dark t)
    #+end_src
		
** Org-brain
	 #+begin_src emacs-lisp
		 (straight-use-package 'org-brain)
		 (with-eval-after-load 'evil
			 (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
		 (global-set-key (kbd "s-b") 'org-brain-visualize)
	 #+end_src

