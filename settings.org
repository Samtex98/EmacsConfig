#+TITLE: Emacs Initialization file
* Emacs Settings
** Emacs UI
    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (display-time-mode 1)
      (scroll-bar-mode 0)
      (tool-bar-mode -1)
      (blink-cursor-mode 0)
      (show-paren-mode 1)
      (global-visual-line-mode t)
      (fringe-mode 1)
   #+end_src

** Emacs Misc
    #+begin_src emacs-lisp
      (setq tab-width 4)
      (mouse-wheel-mode -1)
      (setq show-paren-delay 0)

      (setq help-at-pt-display-when-idle t)
      (setq help-at-pt-timer-delay 0.1)
      (help-at-pt-set-timer)

      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

** Emacs Backup
    #+begin_src emacs-lisp
      (setq
      backup-by-copying t
      backup-directory-alist '(("." . "~/.saves/"))
      delete-old-versions t
      kept-new-version 6
      kept-old-versions 2
      version-control t)
    #+end_src

** Font
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "DejaVu Sans mono 12")
      (set-frame-font "DejaVu Sans mono 12" nil t)
    #+end_src
    
** Web Browser Setting
    #+begin_src emacs-lisp
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "qutebrowser")
    #+end_src

** Custom Load Paths
    #+begin_src emacs-lisp
      (add-to-list 'load-path
		   "~/.emacs.d/elisp/"
		   "~/.emacs.d/plugins/yasnippet")
    #+end_src

** CC-mode
    #+begin_src emacs-lisp
      (require 'cc-mode)
    #+end_src

** Colorscheme
    #+begin_src emacs-lisp
      (load-theme 'spacemacs-dark t)
    #+end_src

* Modeline
   #+begin_src emacs-lisp
     (defun modeline-alignment (left right)
       (let* ((available-width (-(window-width)(length left) 2)))
	 (format (format "%%s %%%ds " available-width) left right)))

     (setq-default mode-line-format
		   '((:eval (modeline-alignment
			     ;;left
			     (format-mode-line
			      (list
			       "   "
			       ;; Filestatus -:---
			       mode-line-mule-info
			       mode-line-modified
			       mode-line-client
			       mode-line-remote
			       mode-line-front-space
			       ;; Buffername
			       "%b"
			       ;; VC/Git
			       '(vc-mode vc-mode)))
			     ;;right
			     (format-mode-line
			      (list
			       '(:eval (if (not (eq battery-mode-line-string ""))
					  (concat "" battery-mode-line-string "%%%   | ")))
			       ;; Date (Week Year-Month-Day)
			       '(:eval(propertize(format-time-string "w%V  %d/%m-%a")))
			       ;; Time (Hour:Minutes:Seconds)
			       '(:eval(propertize(format-time-string "  %H:%M")))))))))
   #+end_src

* Packages
** Dired
    #+begin_src emacs-lisp
      (defun xah-dired-mode-setup ()
      (dired-hide-details-mode 1))
      (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
    #+end_src

** HTMLize
    #+begin_src emacs-lisp
      (use-package htmlize
	:ensure t)
    #+end_src

** Battery
    #+begin_src emacs-lisp
      (use-package battery
	:init
	(display-battery-mode 1)
	(setq battery-mode-line-format "%p"))
    #+end_src

** Org-mode
    #+begin_src emacs-lisp
      (require 'org)
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
    #+end_src

** Magit
    #+begin_src emacs-lisp
      (use-package magit
        :ensure t)
    #+end_src
    
** Evil
    #+begin_src emacs-lisp
      (use-package evil
	:ensure t
	:init
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil)
	(add-to-list 'load-path "~/.emacs.d/evil")
	:config
	(evil-mode 1))
    #+end_src

*** Evil-magit
     #+begin_src emacs-lisp
       (use-package evil-magit
	 :ensure t)
     #+end_src

*** Evil-collection
     #+begin_src emacs-lisp
       (use-package evil-collection
	 :after evil
	 :ensure t
	 :custom
	 (evil-collection-setup-minibuffer t)
	 (evil-collection-company-use-tng nil)
	 :init
	 (evil-collection-init))
     #+end_src

** Ivy
    #+begin_src emacs-lisp
      (use-package ivy
	:ensure t
	:init
	(setq ivy-use-virtual-buffers t)
	(setq ivy-count-format "(%d/%d) ")
	(setq ivy-use-selectable-prompt t)
	:config
	(ivy-mode 1)
	:bind
	("C-s" . 'counsel-grep-or-swiper)
	("M-x" . 'counsel-M-x))
    #+end_src

** Swiper
    #+begin_src emacs-lisp
      (use-package swiper
        :ensure t)
    #+end_src

** Counsel
    #+begin_src emacs-lisp
      (use-package counsel
        :ensure t)
    #+end_src

*** COMMENT Counsel Projectile
     #+begin_src emacs-lisp
       (use-package counsel-projectile
         :ensure t)
     #+end_src    
    
** Spacemacs Theme
    #+begin_src emacs-lisp
      (use-package spacemacs-theme
        :ensure t
        :defer t)
    #+end_src
    
** Which-key
    #+begin_src emacs-lisp
      (use-package which-key
        :ensure t
        :config
        (which-key-mode))
    #+end_src
    
** Polymode
    #+begin_src emacs-lisp
      (use-package polymode
        :ensure t
        :init
        (add-to-list 'auto-mode-alist '("\\.Snw$" . poly-noweb+r-mode))
        (add-to-list 'auto-mode-alist '("\\.Rnw$" . poly-noweb+r-mode))
        (add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode))
        (add-to-list 'auto-mode-alist '("\\.rapport$" . poly-rapport-mode))
        (add-to-list 'auto-mode-alist '("\\.Rhtml$" . poly-html+r-mode))
        (add-to-list 'auto-mode-alist '("\\.Rbrew$" . poly-brew+r-mode))
        (add-to-list 'auto-mode-alist '("\\.Rcpp$" . poly-r+c++-mode))
        (add-to-list 'auto-mode-alist '("\\.cppR$" . poly-c++r-mode))
        (add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode)))
    #+end_src
    
** COMMENT Undo-Tree
    #+begin_src emacs-lisp
      (use-package undo-tree
	:ensure t
	:config
	(setq undo-tree-auto-save-history t) 
	(global-undo-tree-mode))
    #+end_src
    
** Flycheck
    #+begin_src emacs-lisp
      (use-package flycheck
        :ensure t
        :hook
        (prog-mode . flycheck-mode))
    #+end_src

*** Flycheck Irony
     #+begin_src emacs-lisp
       (use-package flycheck-irony
         :ensure t
         :hook
         (flycheck-mode . flycheck-irony-setup))
     #+end_src 
     
*** Flycheck lisp
     #+begin_src emacs-lisp
       (use-package flycheck
	 :init
	 (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
     #+end_src

** Smart/Evilparens
    #+begin_src emacs-lisp
      (use-package evil-smartparens
	:ensure t)
      (use-package smartparens
	:ensure t
	:hook
	(smartparens-enabled . evil-smartparens-mode)
	(web-mode . smartparens-mode)
	(c-mode . smartparens-mode)
	(java-mode . smartparens-mode)
	(emacs-lisp-mode . smartparens-mode)
	:config
	(sp-local-pair '(lisp-mode emacs-lisp-mode) "'" nil :actions nil))
    #+end_src
    
** COMMENT EXWM
    #+begin_src emacs-lisp
      (use-package xelb
	:ensure t)
      (use-package exwm
	:ensure t
	:init
	(server-start)
	(require 'exwm-config)
	(setq exwm-input-global-keys
	      `(
		([?\s-r] . exwm-reset)
		([?\s-w] . exwm-workspace-switch)
		,@(mapcar (lambda (i)
			    `(,(kbd (format "s-%d" i)) .
			      (lambda ()
				(interactive)
				(exwm-workspace-switch-create ,i))))
			  (number-sequence 0 9))
		([?\s-&] . (lambda (command)
			     (interactive (list (read-shell-command "$ ")))
			     (start-process-shell-command command nil command)))
		([s-f2] . (lambda ()
			    (interactive)
			    (start-process "" nil "/usr/bin/slock")))))
	(define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)
	(setq exwm-input-simulation-keys
	      '(
		;; movement
		([?\C-b] . [left])
		([?\M-b] . [C-left])
		([?\C-f] . [right])
		([?\M-f] . [C-right])
		([?\C-p] . [up])
		([?\C-n] . [down])
		([?\C-a] . [home])
		([?\C-e] . [end])
		([?\M-v] . [prior])
		([?\C-v] . [next])
		([?\C-d] . [delete])
		([?\C-k] . [S-end delete])
		;; cut/paste.
		([?\C-w] . [?\C-x])
		([?\M-w] . [?\C-c])
		([?\C-y] . [?\C-v])
		;; search
		([?\C-s] . [?\C-f])))
	(exwm-enable))
    #+end_src

** Web-mode
    #+begin_src emacs-lisp
      (use-package web-mode
        :ensure t
        :init
        (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
        :config
        (evil-define-key 'normal web-mode-map
          (kbd "C-c C-e") 'browse-url-of-file))

    #+end_src

** Disaster
    #+begin_src emacs-lisp
      (use-package disaster
        :ensure t)
    #+end_src
    
** Company
    #+begin_src emacs-lisp
      (use-package company
        :ensure t
        :hook
        (prog-mode . global-company-mode))
    #+end_src
     
** Org Bullets
    #+begin_src emacs-lisp
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+end_src

** Page Break Lines
    #+begin_src emacs-lisp
      (use-package page-break-lines
        :ensure t)
    #+end_src
    
** Dashboard
    #+begin_src emacs-lisp
      (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      :init
      (setq show-week-agenda-p t)
      (setq dashboard-banner-logo-title "== SMTX Emacs ==")
      (setq dashboard-items '((recents  . 5)
			      (bookmarks . 3)
			      (agenda . 8)
			      (registers . 5))))
    #+end_src

** Projectile
    #+begin_src emacs-lisp
      (use-package projectile
	:ensure t
	:config
	;; (projectile-mode +1)
	;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
	;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
	)
    #+end_src

** Rainbow Delimiters
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
        :ensure t)
      (use-package rainbow-delimiters-mode
        :hook
        (prog-mode))
    #+end_src
    
** Dash
    #+begin_src emacs-lisp
      (use-package dash
        :ensure t)
    #+end_src
    
** S
#+begin_src emacs-lisp
  (use-package s
    :ensure t)
#+end_src
    
** Origami
    #+begin_src emacs-lisp
      (use-package origami
        :ensure t
        :hook
        (prog-mode . origami-mode))
    #+end_src
    
** Indent Guide
    #+begin_src emacs-lisp
      (use-package indent-guide
        :ensure t
        :hook
        (prog-mode . indent-guide-mode))
    #+end_src
    
** Tablist
    #+begin_src emacs-lisp
      (use-package tablist
        :ensure t)
    #+end_src
    
** PDF Tools
    #+begin_src emacs-lisp
      (use-package pdf-tools
	:defer t
	:ensure t
	:config
	(pdf-tools-install)
	:mode
	("\\.pdf\\'" . pdf-view-mode))
	;;:config
	;; (evil-define-key 'normal pdf-view-mode-map
	;;   (kbd "h") 'image-backward-hscroll
	;;   (kbd "j") 'pdf-view-next-line-or-next-page
	;;   (kbd "k") 'pdf-view-previous-line-or-previous-page
	;;   (kbd "l") 'image-forward-hscroll
	;;   (kbd "J") 'pdf-view-next-page
	;;   (kbd "K") 'pdf-view-previous-page
	;;   (kbd "W") 'pdf-view-fit-width-to-window
	;;   (kbd "H") 'pdf-view-fit-height-to-window
	;;   (kbd "P") 'pdf-view-fit-page-to-window
	;;   (kbd "d") 'pdf-view-scroll-up-or-next-page
	;;   (kbd "u") 'pdf-view-scroll-down-or-previous-page
	;;   (kbd "O") 'pdf-outline
	;;   (kbd "-") 'pdf-view-shrink
	;;   (kbd "+") 'pdf-view-enlarge
	;;   (kbd "=") 'pdf-view-enlarge
	;;   (kbd "gg") 'pdf-view-first-page
	;;   (kbd "G") 'pdf-view-last-page
	;;   (kbd "n") 'pdf-view-midnight-minor-mode
	;;   (kbd "r") 'revert-buffer
	;;   (kbd "p") 'pdf-misc-print-document)
	;; (evil-define-key 'normal outline-mode-map
	;;   (kbd "j") 'next-line
	;;   (kbd "k") 'previous-line
	;;   (kbd "TAB") 'outline-toggle-children
	;;   (kbd "RET") 'pdf-outline-follow-link
	;;   (kbd "SPC") 'pdf-outline-follow-link))
    #+end_src
    
** Irony
    #+begin_src emacs-lisp
      (use-package irony
        :ensure t)
      (use-package irony-mode
        :hook
        (c++-mode)
        (c-mode)
        (objc-mode)

        (irony-mode . irony-cdb-autosetup-compile-options))
    #+end_src

*** Company Irony
     #+begin_src emacs-lisp
       (use-package company-irony
         :ensure t
         :init
         (eval-after-load 'company
           '(add-to-list 'company-backends 'company-irony 'company-auctex)))
     #+end_src
     
** Rainbow mode
    #+begin_src emacs-lisp
      (use-package rainbow-mode
        :ensure t
        :hook
        (prog-mode))
    #+end_src

** Avy
    #+begin_src emacs-lisp
      (use-package avy
        :ensure t)
    #+end_src

** Auctex
    #+begin_src emacs-lisp
      (use-package tex
        :ensure auctex)
    #+end_src

*** Company-auctex
     #+begin_src emacs-lisp
       (use-package company-auctex
         :ensure t
         :init
         (setq TeX-auto-save t)
         (setq TeX-parse-self t)
         (add-to-list 'load-path "path/to/company-auctex.el")
         (company-auctex-init))
     #+end_src

*** Auctex Latexmk
     #+begin_src emacs-lisp
       (use-package auctex-latexmk
         :ensure t
         :init
         (auctex-latexmk-setup))
     #+end_src
     
** Aggresive Indent
    #+begin_src emacs-lisp
      (use-package aggressive-indent
        :load-path "~/.emacs.d/elisp/"
        :ensure t
        :hook
        (prog-mode . aggressive-indent-mode))
    #+end_src
    
** ESS
    #+begin_src emacs-lisp
      (use-package ess
        :ensure t
        :defer 1)
      (use-package ess-site
        :load-path "site-lisp/ess/lisp/"
        :commands R)
    #+end_src

** COMMENT Highligt-indent
    #+begin_src emacs-lisp
      (use-package highlight-indent-guides
	:ensure t
	:init
	(setq highlight-indent-guides-method 'character)
	:config
	(setq highlight-indent-guides-responsive 'top)
	(setq highlight-indent-guides-delay 0)
	:hook
	(prog-mode . highlight-indent-guides-mode))
    #+end_src

** COMMENT Multiple-cursors
    #+begin_src emacs-lisp
      (use-package multiple-cursors
	:ensure t
	:init
	(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines))
    #+end_src

** Fsharp-mode
    #+begin_src emacs-lisp
      (use-package fsharp-mode
	:ensure t
	:init
	(setq inferior-fsharp-program "/usr/bin/fsharpi")
	(setq fsharp-compiler "/usr/bin/fsharpc"))
    #+end_src

** Lsp-java
    #+begin_src emacs-lisp
      (use-package lsp-java
	:ensure t
	;; :init
	;; (setq lsp-inhibit-message t)
	:config
	(add-hook 'java-mode-hook
		  (lambda ()
		    (setq-local company-backends (list 'company-lsp))))

	(add-hook 'java-mode-hook 'lsp-java-enable)
	(add-hook 'java-mode-hook 'flycheck-mode)
	(add-hook 'java-mode-hook 'company-mode))
    #+end_src

*** lsp-mode
     #+begin_src emacs-lisp
      (use-package lsp-mode
	:ensure t
	:init (setq lsp-eldoc-render-all t
		    lsp-highlight-symbol-at-point nil))
     #+end_src

*** Company-lsp
     #+begin_src emacs-lisp
       (use-package company-lsp
	 :after  company
	 :ensure t
	 :config
	 (setq company-lsp-cache-candidates t
	       company-lsp-async t))
     #+end_src

*** Dap-mode
     #+begin_src emacs-lisp
       (use-package dap-mode
	 :ensure t :after lsp-mode
	 :config
	 (dap-mode 1)
	 (dap-ui-mode 1))
     #+end_src

*** Dap-java
     #+begin_src emacs-lisp
       (use-package dap-java
	 :after (lsp-java))

     #+end_src

*** COMMENT lsp-ui
    #+begin_src emacs-lisp
      (use-package lsp-ui
	:ensure t
	:config
	(setq lsp-ui-sideline-update-mode 'point))
    #+end_src

** COMMENT Zoom
    #+begin_src emacs-lisp
      (use-package zoom
	:ensure t
	:custom
	'(zoom-mode t)
	(zoom-size '(0.618 . 0.618)))
    #+end_src

** COMMENT Eyebrowse
    #+begin_src emacs-lisp
      (use-package eyebrowse
	:ensure t
	:init
	(eyebrowse-mode t))
    #+end_src

** Yasnippet
    #+begin_src emacs-lisp
      (use-package yasnippet
	:ensure t
	:config
	(yas-global-mode))
    #+end_src

** COMMENT Prettify Symbols
    #+begin_src emacs-lisp
      (defun my-prettify-mode-hook ()
	(push '("forall" . ?∀) prettify-symbols-alist)
	(push '("thereexists" . ?∃) prettify-symbols-alist)
	(push '("ifandonlyif" . ?≡) prettify-symbols-alist)
	(push '("implies" . ?→) prettify-symbols-alist)

	(push '("XOR" . ?⊕) prettify-symbols-alist)
	(push '("OR" . ?∨) prettify-symbols-alist)
	(push '("AND" . ?∧) prettify-symbols-alist)
	(push '("NOT" . ?¬) prettify-symbols-alist)

	(push '(">=" . ?≥) prettify-symbols-alist)
	(push '("<=" . ?≤) prettify-symbols-alist)

	(push '("union" . ?∪) prettify-symbols-alist)
	(push '("intersection" . ?∩) prettify-symbols-alist)
	(push '("superset" . ?⊆) prettify-symbols-alist)
	(push '("propersuperset" . ?⊂) prettify-symbols-alist)
	(push '("element" . ?∈) prettify-symbols-alist)

	(push '("primenumber" . ?ℙ) prettify-symbols-alist)
	(push '("naturalnumber" . ?ℕ) prettify-symbols-alist)
	(push '("intergernumber" . ?ℤ) prettify-symbols-alist)
	(push '("rationalnumber" . ?ℚ) prettify-symbols-alist)
	(push '("realnumber" . ?ℝ) prettify-symbols-alist)
	(push '("complexnumber" . ?ℂ) prettify-symbols-alist)
	(push '("quaternionnumber" . ?ℍ) prettify-symbols-alist)

	(push '("pi" . ?π) prettify-symbols-alist)
	(push '("delta" . ?Δ) prettify-symbols-alist)
	(push '("phi" . ?φ) prettify-symbols-alist)
	(push '("sigma" . ?Σ) prettify-symbols-alist)
	(push '("lambda" . ?λ) prettify-symbols-alist)

	(push '("||" . ?∥) prettify-symbols-alist)
	(prettify-symbols-mode 1))

      (add-hook 'prog-mode-hook 'my-prettify-mode-hook)
      (add-hook 'org-mode-hook 'my-prettify-mode-hook)
    #+end_src

** Ox-twbs
    #+begin_src emacs-lisp
      (use-package ox-twbs
	:ensure t)
    #+end_src

* Custom Functions
** Current-directory
    #+begin_src emacs-lisp
      (defun current-directory()
	(interactive)
	(message (buffer-file-name)))
    #+end_src

* Custom Keybinds
** Key maps
    #+begin_src emacs-lisp
      (define-prefix-command 'my/leader-map)
      (define-prefix-command 'my/avy-menu-map)
      (define-prefix-command 'my/origami-menu-map)
    #+end_src

** Evil Keybinds
    #+begin_src emacs-lisp
      (define-key evil-normal-state-map (kbd "SPC") 'my/leader-map)
    #+end_src

** Dired
# Remove Space = next dired
# Next marked

    #+begin_src

    #+end_src

** Leader map
    #+begin_src emacs-lisp
      (use-package evil
	:config
	(define-key my/leader-map (kbd "b") 'switch-to-buffer)
	(define-key my/leader-map (kbd "f") 'swiper)
	(define-key my/leader-map (kbd "F") 'swiper-all)
	(define-key my/leader-map (kbd "c") 'calc)
	(define-key my/leader-map (kbd "t") 'org-agenda)
	(define-key my/leader-map (kbd "g") 'magit-status)
	(define-key my/leader-map (kbd "d") 'current-directory)
	(define-key my/leader-map (kbd "I") 'org-toggle-pretty-entities))
    #+end_src

*** Avy Menu
    #+begin_src emacs-lisp
      (use-package evil
        :config
        (define-key my/leader-map (kbd "a") 'my/avy-menu-map)

        (define-key my/avy-menu-map "c" 'avy-goto-char-2)
        ;(define-key my/avy-menu-map "n" 'avy-goto-char)
        (define-key my/avy-menu-map "a" 'avy-goto-line))
    #+end_src

*** Origami Menu
    #+begin_src emacs-lisp
      (use-package origami
	:config
	(define-key my/leader-map (kbd "o") 'my/origami-menu-map)

	(define-key my/origami-menu-map (kbd "TAB") 'origami-recursively-toggle-node)
	(define-key my/origami-menu-map (kbd "S-TAB") 'origami-show-only-node))
    #+end_src
